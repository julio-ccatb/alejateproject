// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator zod {
    provider                  = "zod-prisma-types"
    createPartialTypes        = "true"
    createRelationValuesTypes = "true"
    useMultipleFiles          = "true"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          Role[]    @default([NOT_VERIFIED])

    Participant Participant[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TourPackage {
    id                       String      @id @default(cuid())
    title                    String
    description              String
    duration                 String
    destination              String
    picture                  String
    pricePerPerson           Decimal     @db.Decimal(10, 2)
    initialDeposit           Decimal     @default("1000.00") @db.Decimal(10, 2)
    policyLink               String
    remainingPaymentDeadline String
    fullPaymentRequirement   String
    departureLocation        String
    departureTime            DateTime
    returnTime               DateTime
    packageType              PackageType @default(TOUR)
    difficulty               Dificulty   @default(NORMAL)
    recommendedClothing      String[]
    paymentMethods           String[]
    requirements             String[]
    includes                 String[]
    gallery                  String[]
    participantsLimit        Int

    itinerary    Itinerary[]   @relation("TourPackageItineraries")
    participants Participant[] @relation("TourPackageParticipants")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Itinerary {
    id            Int         @id @default(autoincrement())
    stop          String
    activities    String[]
    tourPackage   TourPackage @relation("TourPackageItineraries", fields: [tourPackageId], references: [id])
    tourPackageId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Participant {
    id              Int             @id @default(autoincrement())
    user            User            @relation(fields: [userId], references: [id])
    userId          String
    tourPackage     TourPackage     @relation("TourPackageParticipants", fields: [tourPackageId], references: [id])
    tourPackageId   String
    participantType ParticipantType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Dificulty {
    EASY
    NORMAL
    DIFICULT
    HARD
}

enum PackageType {
    TEMPLATE
    TOUR
}

enum ParticipantType {
    STAFF
    PARTICIPANT
}

enum Role {
    NOT_VERIFIED
    ADMIN
    EDITOR
    OPERATOR
    READER
    VIEWER
}
